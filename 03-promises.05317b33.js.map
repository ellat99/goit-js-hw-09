{"mappings":"YAAA,SAASA,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAIP,SAASQ,EAAiBC,GAClB,iBAAkBC,OAKQ,YAA5BC,aAAaC,WACf,IAAID,aAAa,uBAAwB,CAAEE,KAAMJ,IACZ,WAA5BE,aAAaC,YACtBD,aAAaG,oBAAoBC,MAAK,SAAAH,GACjB,YAAfA,GACF,IAAID,aAAa,uBAAwB,CAAEE,KAAMJ,G,IATrDO,QAAQC,MAAM,qD,CAelBC,SAASC,iBAAiB,oBAAoB,WAC5C,IAAMC,EAAOF,SAASG,cAAc,SAEpCD,EAAKD,iBAAiB,UAAU,SAAUG,GACxCA,EAAMC,iBAMN,IAJA,IAAMC,EAAaC,SAASL,EAAKM,SAAgB,MAAEC,OAC7CC,EAAOH,SAASL,EAAKM,SAAe,KAAEC,OACtCE,EAASJ,SAASL,EAAKM,SAAiB,OAAEC,OAEvCG,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAI/BhC,EAHiBgC,EAAI,EACAN,EAAaM,EAAIF,GAGnCb,MAAK,SAAAgB,G,IAAGhC,EAAQgC,EAARhC,SAAUC,EAAK+B,EAAL/B,MAEfQ,EADuB,uBAAwCwB,OAAfjC,EAAS,QAAYiC,OAANhC,EAAM,M,IAGxEiC,OAAM,SAAAF,G,IAAGhC,EAAQgC,EAARhC,SAAUC,EAAK+B,EAAL/B,MAElBQ,EADwB,sBAAqCwB,OAAfjC,EAAS,QAAYiC,OAANhC,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction showNotification(message) {\n  if (!('Notification' in window)) {\n    console.error('This browser does not support desktop notification');\n    return;\n  }\n\n  if (Notification.permission === 'granted') {\n    new Notification('Promise Notification', { body: message });\n  } else if (Notification.permission !== 'denied') {\n    Notification.requestPermission().then(permission => {\n      if (permission === 'granted') {\n        new Notification('Promise Notification', { body: message });\n      }\n    });\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  const form = document.querySelector('.form');\n\n  form.addEventListener('submit', function (event) {\n    event.preventDefault();\n\n    const firstDelay = parseInt(form.elements['delay'].value);\n    const step = parseInt(form.elements['step'].value);\n    const amount = parseInt(form.elements['amount'].value);\n\n    for (let i = 0; i < amount; i++) {\n      const position = i + 1;\n      const currentDelay = firstDelay + i * step;\n\n      createPromise(position, currentDelay)\n        .then(({ position, delay }) => {\n          const fulfilledMessage = `✅ Fulfilled promise ${position} in ${delay}ms`;\n          showNotification(fulfilledMessage);\n        })\n        .catch(({ position, delay }) => {\n          const rejectedMessage = `❌ Rejected promise ${position} in ${delay}ms`;\n          showNotification(rejectedMessage);\n        });\n    }\n  });\n});\n"],"names":["$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$ce04d3a99e08e73b$var$showNotification","message","window","Notification","permission","body","requestPermission","then","console","error","document","addEventListener","form","querySelector","event","preventDefault","firstDelay","parseInt","elements","value","step","amount","i","param","concat","catch"],"version":3,"file":"03-promises.05317b33.js.map"}