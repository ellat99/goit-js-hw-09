{"mappings":"AACA,SAASA,EAAcC,EAAUC,GAE/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAE3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAIbQ,SAASC,iBAAiB,oBAAoB,WAErC,MAADC,EAAOF,SAASG,cAAc,SAEpCD,EAAKD,iBAAiB,UAAU,SAAUG,GACxCA,EAAMC,iBAEJ,MAAIC,EAAaC,SAASL,EAAKM,SAAgB,MAAEC,OAC7CC,EAAOH,SAASL,EAAKM,SAAe,KAAEC,OACtCE,EAASJ,SAASL,EAAKM,SAAiB,OAAEC,OAG/C,IAAI,IAAIG,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAK1BtB,EAJYsB,EAAI,EACAN,EAAaM,EAAIF,GAKnCG,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MACjBsB,QAAQC,IAAI,uBAAqBxB,QAAiBC,MAAU,IAE7DwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBsB,QAAQC,IAAI,sBAAoBxB,QAAiBC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["// aceasta functie primeste 2 parametri\nfunction createPromise(position, delay) {\n  //creaza si returneaza un nou obiect Promise\n  return new Promise((resolve, reject) => {\n    //cu ajutorul math.random se decide daca promise ul trebuie rezolvat/respins,exista o probabilitate de 70% sa fie rezolvat\n    const shouldResolve = Math.random() > 0.3;\n    //folosit pentru a amana rezolvarea sau respingerea promise-ului dupa o anumita intarzie 'delay'\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  //asigură că scriptul rulează doar după ce întregul document HTML este complet încărcat.\n  const form = document.querySelector('.form');\n\n  form.addEventListener('submit', function (event) {\n    event.preventDefault(); //adaugă un eveniment pentru a asculta acțiunile de submit pe formular.\n\n    const firstDelay = parseInt(form.elements['delay'].value);\n    const step = parseInt(form.elements['step'].value);\n    const amount = parseInt(form.elements['amount'].value);\n    //extrag valorile din câmpurile formularului.\n\n    for (let i = 0; i < amount; i++) {\n      const position = i + 1;\n      const currentDelay = firstDelay + i * step;\n      //Un for loop este utilizat pentru a crea și gestiona promise-urile în funcție de valorile introduse în formular.\n      //Pentru fiecare iterare a buclei, se calculează position și currentDelay în funcție de formula specificată.\n      createPromise(position, currentDelay)\n        //createPromise este apelata pentru a crea promise ul\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n      /**În caz de rezolvare (then), se afișează un mesaj în consolă cu privire la îndeplinirea promise-ului.\nÎn caz de respingere (catch), se afișează un mesaj în consolă cu privire la respingerea promise-ului. */\n    }\n  });\n});\n"],"names":["$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","addEventListener","form","querySelector","event","preventDefault","firstDelay","parseInt","elements","value","step","amount","i","then","console","log","catch"],"version":3,"file":"03-promises.6ba9ea80.js.map"}