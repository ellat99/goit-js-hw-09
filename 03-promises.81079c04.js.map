{"mappings":"AAAA,SAASA,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAIb,SAASQ,EAAaC,EAASC,EAAO,QACpC,MAAMC,EAAWC,SAASC,eAAe,YACzCF,EAASG,YAAcL,EACvBE,EAASI,MAAMC,gBAA2B,UAATN,EAAmB,UAAY,OAChEC,EAASI,MAAME,QAAU,QAGxBV,YAAU,KACTI,EAASI,MAAME,QAAU,MAAM,GAC9B,I,CAGLL,SAASM,iBAAiB,oBAAoB,WAC5C,MAAMC,EAAOP,SAASQ,cAAc,SAEpCD,EAAKD,iBAAiB,UAAU,SAAUG,GACxCA,EAAMC,iBAEN,MAAMC,EAAaC,SAASL,EAAKM,SAAgB,MAAEC,OAC7CC,EAAOH,SAASL,EAAKM,SAAe,KAAEC,OACtCE,EAASJ,SAASL,EAAKM,SAAiB,OAAEC,OAEhD,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAI/B/B,EAHiB+B,EAAI,EACAN,EAAaM,EAAIF,GAGnCG,MAAK,EAAC/B,SAAEA,EAAQC,MAAEA,MAEfQ,EADuB,uBAAqBT,QAAiBC,MAChC,OAAO,IAEvC+B,OAAM,EAAChC,SAAEA,EAAQC,MAAEA,MAElBQ,EADwB,sBAAoBT,QAAeC,MAC7B,QAAQ,G","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction showSnackbar(message, type = 'info') {\n  const snackbar = document.getElementById('snackbar');\n  snackbar.textContent = message;\n  snackbar.style.backgroundColor = type === 'error' ? '#ff3333' : '#333'; // Red color for errors, default color for info\n  snackbar.style.display = 'block';\n\n  // Ascunde snackbar-ul după 3 secunde\n  setTimeout(() => {\n    snackbar.style.display = 'none';\n  }, 3000);\n}\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  const form = document.querySelector('.form');\n\n  form.addEventListener('submit', function (event) {\n    event.preventDefault();\n\n    const firstDelay = parseInt(form.elements['delay'].value);\n    const step = parseInt(form.elements['step'].value);\n    const amount = parseInt(form.elements['amount'].value);\n\n    for (let i = 0; i < amount; i++) {\n      const position = i + 1;\n      const currentDelay = firstDelay + i * step;\n\n      createPromise(position, currentDelay)\n        .then(({ position, delay }) => {\n          const fulfilledMessage = `✅ Fulfilled promise ${position} in ${delay}ms`;\n          showSnackbar(fulfilledMessage, 'info');\n        })\n        .catch(({ position, delay }) => {\n          const rejectedMessage = `❌ Rejected promise ${position} in ${delay}ms`;\n          showSnackbar(rejectedMessage, 'error');\n        });\n    }\n  });\n});\n"],"names":["$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$47d4ff9957288465$var$showSnackbar","message","type","snackbar","document","getElementById","textContent","style","backgroundColor","display","addEventListener","form","querySelector","event","preventDefault","firstDelay","parseInt","elements","value","step","amount","i","then","catch"],"version":3,"file":"03-promises.81079c04.js.map"}